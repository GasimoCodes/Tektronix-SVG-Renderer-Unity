#pragma kernel CSDrawLines

// Buffers
StructuredBuffer<float2> points; // List of all points
StructuredBuffer<int> path; // Indices of points forming the path
StructuredBuffer<float4> pointColors; // Colors for each point (optional)

// Parameters
int pointCount;
int currentLineIndex;
float lineWidthPixels;
float4 startColor;
float4 endColor;
float4 solidColor;

// Output
RWTexture2D<float4> Result;

// Helper function for anti-aliased pixel intensity with nonlinear falloff
float PixelIntensity(float dist, float lineWidth)
{
    float halfWidth = lineWidth * 0.5;
    // Apply nonlinear falloff using exponential function
    float normalizedDist = saturate((dist - (halfWidth - 0.5)) / 1.0);
    return saturate(1.0 - pow(normalizedDist, 1.5)); // Nonlinear falloff power
}

// Helper function to ensure alpha is always 1.0
float4 EnsureOpaque(float4 color)
{
    return float4(color.rgb, 1.0);
}

// Helper function to get HDR intensity multiplier with nonlinear gradient
float GetHDRIntensity(int lineIndex, int currentIndex)
{
    // Create a nonlinear falloff for intensity
    float distance = currentIndex - lineIndex;
    
    if (distance <= 0)
        return 2.0; // Current line is brightest
    else if (distance < 15)
    {
        // Exponential falloff for more realistic phosphor persistence
        float normalizedDist = distance / 15.0;
        return 2.0 * pow(1.0 - normalizedDist, 2.2) + 0.8;
    }
    else
        return 0.8; // Base brightness for older lines
}

// Helper function to check if a color is black
bool IsBlack(float4 color)
{
    return color.r < 0.01 && color.g < 0.01 && color.b < 0.01;
}

// Helper function to create a subtle variation in shape for the drawing head
float2 VaryShape(float2 offset, float time, float strength)
{
    // Create a subtle organic variation using sin/cos
    float angle = atan2(offset.y, offset.x);
    float len = length(offset);
    
    // More natural shape variation based on time and angle
    float variation = sin(angle * 3.0 + time * 0.1) * 0.2 +
                      cos(angle * 2.0 + time * 0.2) * 0.3 +
                      sin(angle * 5.0 + time * 0.05) * 0.1; // Add higher frequency detail
    
    // Adjust length based on variation
    len *= 1.0 + variation * strength;
    
    // Convert back to cartesian coordinates
    return float2(cos(angle) * len, sin(angle) * len);
}

// Calculate phosphor color transition between segments
float4 GetPhosphorTransitionColor(float4 prevColor, float4 currentColor, float age, float t)
{
    // Apply nonlinear blending between the colors
    float blendPower = 1.5; // Controls nonlinearity of the transition
    float blendFactor = pow(t, blendPower);
    
    // Phosphors decay at different rates (green persists longer than blue, red in between)
    float3 decayRates = float3(0.85, 0.92, 0.75); // RGB decay rates
    float3 agingColor = lerp(currentColor.rgb, prevColor.rgb * decayRates, saturate(age * 0.5));
    
    return float4(agingColor, 1.0);
}

[numthreads(64, 1, 1)]
void CSDrawLines(uint3 id : SV_DispatchThreadID)
{
    uint idx = id.x;

    // Extend the range to include 10 additional points in the past
    if (idx < max(0, currentLineIndex - 100) || idx >= currentLineIndex)
        return;

    int startIndex = path[idx];
    int endIndex = path[idx + 1];

    // Skip rendering if a break marker (-1) is encountered
    if (startIndex == -1 || endIndex == -1 || startIndex >= pointCount || endIndex >= pointCount)
        return;

    float2 start = points[startIndex];
    float2 end = points[endIndex];
    float2 dir = end - start;
    float len = length(dir);

    if (len < 0.001)
        return;

    dir /= len;

    // Perpendicular direction for line width
    float2 perpDir = float2(-dir.y, dir.x);

    float4 lineColor;

    float4 lineColorWhiteTint = (pointColors[endIndex] * 0.7 + float4(0.3, 0.3, 0.3, 0.0)) * startColor;
    
    // If the line is within the additional 10 points in the past, set it to endColor
    if (idx < max(0, currentLineIndex - 50))
    {
        lineColor = pointColors[endIndex];
    }
    else
    {
        // Reverse the interpolation factor for the color lerp
        float t = 1.0 - ((float(idx) - max(0, currentLineIndex - 50)) / min(50.0, float(currentLineIndex)));
        lineColor = lerp(lineColorWhiteTint, pointColors[endIndex], t);
    }



    float hdrIntensity = GetHDRIntensity(idx, currentLineIndex);
    lineColor *= hdrIntensity;
    lineColor.a = 1.0;

    float step = min(0.4, 0.8 / max(len, 1.0));
    for (float t = 0.0; t <= 1.0; t += step)
    {
        float2 pos = lerp(start, end, t);

        // Render line with thickness
        for (float offset = -lineWidthPixels * 0.5; offset <= lineWidthPixels * 0.5; offset += 1.0)
        {
            float2 offsetPos = pos + perpDir * offset;
            int2 pixel = int2(offsetPos);

            // Calculate pixel intensity for anti-aliasing
            float dist = abs(offset);
            float intensity = PixelIntensity(dist, lineWidthPixels);

            float4 existingColor = Result[pixel];
            Result[pixel] = lerp(existingColor, lineColor, intensity);
        }
    }
}




